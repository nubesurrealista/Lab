name: Social App Release APK (Signed)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Basado en .nvmrc tÃ­pico de Bluesky; ajusta si difiere

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Yarn and Expo CLI
        run: npm install -g yarn expo-cli

      - name: Clone Social App repo
        run: git clone --depth 1 https://github.com/nubesurrealista/social-app.git social-app

      - name: Install dependencies
        working-directory: social-app
        run: yarn install

      - name: Compile translations
        working-directory: social-app
        run: yarn intl:build 2>&1 | tee i18n.log

      - name: Check for i18n compilation errors
        working-directory: social-app
        run: if grep -q "invalid syntax" "i18n.log"; then echo "Found compilation errors!" && exit 1; else echo "No compilation errors!"; fi

      - name: Prebuild Android project
        working-directory: social-app
        run: npx expo prebuild --platform android --clean

      - name: Set up Android SDK
        run: |
          mkdir -p $HOME/.android/sdk/cmdline-tools
          cd $HOME/.android/sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip
          mv cmdline-tools latest
          yes | $HOME/.android/sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          $HOME/.android/sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          echo "ANDROID_HOME=$HOME/.android/sdk" >> $GITHUB_ENV
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Decode keystore into android/app dir
        working-directory: social-app
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE_B64 }}" | base64 -d > android/app/nube.p12

      - name: Create release signing properties in android/app dir
        working-directory: social-app
        run: |
          echo "storeFile=nube.p12" > android/app/release-signing.properties
          echo "storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> android/app/release-signing.properties
          echo "keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}" >> android/app/release-signing.properties
          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> android/app/release-signing.properties

      - name: Ensure Gradle Wrapper is executable
        working-directory: social-app/android
        run: chmod +x ./gradlew

      - name: Optimize Gradle properties
        working-directory: social-app/android
        run: |
          echo "org.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=true" >> gradle.properties

      - name: Inject optimizations and signingConfigs into build.gradle
        working-directory: social-app
        run: |
          FILE="android/app/build.gradle"
          # Inject signingConfigs if not present
          if ! grep -q "signingConfigs" "$FILE"; then
            awk '
              /android {/ {
                print $0
                print "    signingConfigs {"
                print "        release {"
                print "            def keystoreProperties = new Properties()"
                print "            def keystorePropertiesFile = rootProject.file(\"app/release-signing.properties\")"
                print "            if (keystorePropertiesFile.exists()) {"
                print "                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))"
                print "            }"
                print "            storeFile file(keystoreProperties[\"storeFile\"])"
                print "            storePassword keystoreProperties[\"storePassword\"]"
                print "            keyAlias keystoreProperties[\"keyAlias\"]"
                print "            keyPassword keystoreProperties[\"keyPassword\"]"
                print "        }"
                print "    }"
                next
              }
              { print }
            ' "$FILE" > tmp && mv tmp "$FILE"
          fi
          # Inject signingConfig to release buildType and optimizations
          if ! grep -q "signingConfig signingConfigs.release" "$FILE"; then
            awk '
              /buildTypes {/ {
                inBuildTypes = 1
              }
              inBuildTypes && /release {/ {
                print $0
                print "            signingConfig signingConfigs.release"
                print "            minifyEnabled true"
                print "            shrinkResources true"
                print "            enableProguardInReleaseBuilds true"  # For better obfuscation/performance
                next
              }
              /}/ && inBuildTypes {
                inBuildTypes = 0
              }
              { print }
            ' "$FILE" > tmp && mv tmp "$FILE"
          fi
          # Ensure Hermes if not present (for JS optimization)
          if ! grep -q "enableHermes" "$FILE"; then
            awk '
              /buildTypes {/ {
                print $0
                print "    def enableHermes = true  // Enable Hermes for better performance"
                next
              }
              { print }
            ' "$FILE" > tmp && mv tmp "$FILE"
          fi

      - name: Build release APK
        working-directory: social-app/android
        run: ./gradlew assembleRelease

      - name: List APKs
        working-directory: social-app
        run: find android -type f -name "*.apk"

      - name: Collect APKs
        working-directory: social-app
        run: |
          mkdir -p apk-out
          find android -type f -name "*.apk" -exec cp {} apk-out/ \;

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: social-app-release-apk
          path: social-app/apk-out/*.apk
          if-no-files-found: error
          
